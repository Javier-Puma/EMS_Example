// app/(dashboard)/employees/edit/[id]/page.jsx
'use client'

import { useEffect, useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { getEmployee, updateEmployee } from '../../../../services/AxiosService'

export default function EditEmployeePage() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: ''
  })
  const { id } = useParams()
  const router = useRouter()

  useEffect(() => {
    if (id) {
      getEmployee(id).then(response => {
        setFormData({
          firstName: response.data.firstName,
          lastName: response.data.lastName,
          email: response.data.email
        })
      }).catch(error => {
        console.error('Error fetching employee:', error)
        router.push('/employees') // Redirige si hay error
      })
    }
  }, [id, router])

  const handleSubmit = async (e) => {
    e.preventDefault()
    try {
      await updateEmployee(id, formData)
      router.push('/employees')
    } catch (error) {
      console.error('Error updating employee:', error)
    }
  }
    return (
        <div className='container'>
            <br/><br/>
            <div className='row'>
                <div className='card col-md-6 offset-md-3'>
                    <h2 className='text-center'>Update Employee</h2>
                    <div className='card-body'>
                        <form onSubmit={handleSubmit}>
                            <div className='form-group mb-2'>
                                <label className='form-label'>Employee First Name</label>
                                <input
                                    type="text"
                                    placeholder='Enter Employee First Name'
                                    name='firstName'
                                    value={formData.firstName}
                                    className={`form-control ${errors.firstName ? 'is-invalid' : ''}`}
                                    onChange={handleChange}
                                />
                                {errors.firstName && <div className='invalid-feedback'>{errors.firstName}</div>}
                            </div>
                            <div className='form-group mb-2'>
                                <label className='form-label'>Employee Last Name</label>
                                <input
                                    type="text"
                                    placeholder='Enter Employee Last Name'
                                    name='lastName'
                                    value={formData.lastName}
                                    className={`form-control ${errors.lastName ? 'is-invalid' : ''}`}
                                    onChange={handleChange}
                                />
                                {errors.lastName && <div className='invalid-feedback'>{errors.lastName}</div>}
                            </div>
                            <div className='form-group mb-2'>
                                <label className='form-label'>Employee Email</label>
                                <input
                                    type="email"
                                    placeholder='Enter Employee Email'
                                    name='email'
                                    value={formData.email}
                                    className={`form-control ${errors.email ? 'is-invalid' : ''}`}
                                    onChange={handleChange}
                                />
                                {errors.email && <div className='invalid-feedback'>{errors.email}</div>}
                            </div>
                            <button type='submit' className='btn btn-success'>Update</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    )
}